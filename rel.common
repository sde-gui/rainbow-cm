# Copyright (C) 2011-2013 by rickyrockrat <gpib at rickyrockrat dot net>
#
# This file is part of Parcellite.
#
# Parcellite is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# Parcellite is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

PURL="https://svn.code.sf.net"
BURL="$PURL/p/parcellite/code"

# description
check_err () {
  if [ $? -ne 0 ]; then
		echo "$1 Failed. Abort"
		exit 1
	fi
}
# Make sure we are checked in.
check_local () {
  echo "$FUNCNAME"
  M=$(svn st|grep -c "^M")
  if [ "$M" != "0" ]; then
    echo "local is not up to date"
    if [ "$1" = "1" ]; then
      return
    fi
    exit 1
  fi
}
# Ask user what version
ask_version () {
  echo "$FUNCNAME"
  if [ -n "$tag" ]; then
    return
  fi
  echo "Tag to operate on (copy to or build deb from)?"
  read tag
  turl="$BURL/tags/$tag"
  tdir="parcellite-$tag"
  CODIR="$ASVN/test.$tag"
  debdir="parcellite_$tag"
}
# Copy the trunk to tag
svn_cp_to_tag () {
  echo "$FUNCNAME"
  ask_version
  E=$(svn ls $turl --depth empty 2>&1|grep -c "non-exist")
  if [ "$E" = "0" ]; then
    echo "$turl exists."
    exit 1
  fi
  if [ -e "$CODIR" ]; then
    echo "$CODIR exists. Refusing to overwrite."
    exit 1
  fi
  echo "Description for tag?"
  read desc
  echo "username?"
  read user
  echo "Contacting $PURL for svn cp"
  svn cp --username "$user" -m"$desc" $BURL/trunk $turl
  check_err "svn copy"
}
#Check to be sure we have the correct directory orientation
set_svn_local (){
  echo "$FUNCNAME"
  STERM=$(echo "$BURL"|sed 's!.*:!!')
  S=$(grep -c "$STERM" "$CDIR/.svn/entries")
  if [ "$S" = "0" ]; then	
    echo "$CDIR does not appear to be a working local copy"
	  exit 1
  fi
 ASVN=$(dirname "$CDIR")
 if [ -e "$ASVN/.svn" ]; then
   echo "directory '$ASVN should NOT be under svn"
   exit 1
 fi
}
#Fix configure.ac to reflect version and do autogen.
# assume we are in the top directory 
# version is in $1
fix_configure_ac (){
  rm svnversion.sh
  check_err "rm svnver"
  sed -i "s/\(AC_INIT.*\)m4_.*)\(.*rickyrockrat.*\)/\1[$1]\2/" configure.ac
  check_err "update configure.ac"
  ./autogen.sh
}

# make check out dir and and check out tag
test_tag_co () {
  echo "$FUNCNAME"
  mkdir -p "$CODIR"
  check_err "mkdir co"
  cd "$CODIR"
  if [ -e $CODIR/$tag/.svn ] ; then
    echo "$CODIR/$tag already exists. Not re-checking out"
    return
  fi
  echo "performing svn co $turl"
  svn co "$turl"
  check_err "svn co"
  cp -a $tag $tdir
  check_err "mv svn co dir"
  cd $tdir
  check_err "cd $tdir"
  fix_configure_ac "$tag"
}
# Make the tarball
make_tarball () {
  echo "$FUNCNAME"
  cd "$CODIR"
  check_err "cd $CODIR"
  tar --exclude .svn -czf $tdir.tar.gz $tdir
  check_err "tar -c"
}
# test the tar ball
test_tarball() {
  echo "$FUNCNAME"
  cd "$CODIR"
  check_err "cd dir"
  mkdir tar_test
  check_err "mkdir tar_test"
  cd tar_test
  tar -xzf ../$tdir.tar.gz
  check_err "untar"
  cd "$tdir"
  check_err "cd tardir"
  ./configure
  check_err "config"
  make
  check_err "make"
}
# build the deb package files
# the arg is configure options passed to the deb build, i.e.
# --enable-appindicator=no
build_deb () {
  echo "$FUNCNAME"
  cd "$CODIR/tar_test/$tdir"
  check_err "cd tar_test" 
  ./build-debpkg.sh ../../$tdir.tar.gz "$1"
  check_err "build deb"
  cd ..
  mv *.deb ..
}
# set our absolute path (or try to)
set_abs_path () {
  CDIR=$(dirname $0)
  T=$(dirname $CDIR)
  if [ "$T" = "$CDIR" ]; then # ./ invocation
    CDIR=$(pwd)
  fi
  echo "Using '$CDIR'"
}
# setup the directories, build, and send to launchpad
finish_ppa () {
#set up the directory
 if [ "$oldtag" != "$tag" ]; then
   PDIR="$PDIR-$tag"
 fi
 cd "$CODIR"
 check_err "CD $CODIR"
 mkdir -p "$PDIR/t/debian"
 cp -a "$oldtag" "$PDIR/$debdir"
 cd "$PDIR"
 check_err "mkdir/cd $PDIR" 
 cd "$debdir"
 fix_configure_ac "$AVER"
 cd ..
 tar --exclude .svn -czf "$debdir.orig.tar.gz" "$debdir"
 check_err "tar for ppa"
 cp "$debdir"/deb/* t/debian
 
 
#build changelog
 echo "parcellite (${tag}-1ppa${PPANO}) $SERIES; urgency=low" > t/debian/changelog
 cat "$debdir"/ChangeLog |while read line; do 
  if [ $(echo "$line"|grep -c V1.0.2rc5) -gt 0 ]; 
    then break 
  else 
    echo "$line"| sed 's!^.*+!  - !;s!^V!  * V!'|grep -v Changes>> t/debian/changelog
  fi 
 done
 DATE=$(date -R)
 echo " -- Doug Springer <gpib@rickyrockrat.net>  $DATE" >> t/debian/changelog
# setup control
 sed -i 's!ADD_ARCH_HERE!any!' t/debian/control
 if [ "$AI" = "y" ]; then
  sed -i 's!\(^Build-Depends:.*\)!\1, libappindicator-dev!' t/debian/control
  sed -i 's!\(^Depends:.*\)!\1, libappindicator1 (>= 0.2.4)!' t/debian/control
 fi
#do compat
 echo 5 > t/debian/compat
#build rules
 echo "#!/usr/bin/make -f" > t/debian/rules
 echo "# -*- makefile -*-">> t/debian/rules
 echo "# Uncomment this to turn on verbose mode.">> t/debian/rules
 echo "#export DH_VERBOSE=1">> t/debian/rules
 echo " ">> t/debian/rules
 echo "%:">> t/debian/rules
 echo -n -e '\t'>> t/debian/rules
 echo 'dh $@ '>> t/debian/rules
 if [ "$AI" = "y" ]; then
   echo "DEB_CONFIGURE_EXTRA_FLAGS += --enable-appindicator=yes">> t/debian/rules
 fi
 cd t
 gpg --list-keys
 echo "Which key? 2048R/ABCDEF12 - just need the ABC part"
 read KEYID
 echo "Upload source? (y/n)"
 read YN
 if [ "$YN" = "y" ]; then
   debuild -S -sa "-k $KEYID"
 else
   debuild -S -sd "-k $KEYID"
   mv "../${debdir}-1ppa$PPANO.dsc" "../${debdir}-1ppa${PPANO}.dsc.orig"
   gpg --output ../dsc.orig "../${debdir}-1ppa${PPANO}.dsc.orig"
   grep -v orig.tar.gz ../dsc.orig >../dsc.new
   gpg --clearsign < ../dsc.new > "../${debdir}-1ppa${PPANO}.dsc"
 fi
 check_err "debuild"
 cd ..
 echo "Do you want to send the ppa to launchpad for building? (y/n)"
 read YN
 if [ "$YN" = "y" ]; then
   echo "Sending to $PPA"
   dput $PPA "${debdir}-1ppa${PPANO}_source.changes"
   check_err "dput"
 fi
}
# build the ppa & send it to launchpad
# Add this to depends
# libappindicator-dev
setup_ppa (){
 echo "$FUNCNAME"
 echo "Set ppa to something different than $tag? (If multiple series set below, auto-adds ~series"
 read NT
 oldtag="$tag"
 if [ "$NT" = "y" ]; then
   echo "full tag number (replaces '$tag')?"
   read tag
 fi
 
 echo "Build with libappindicator? (y/n)"
 read AI
 echo "What series does this apply to? (i.e. raring/quantal/precise/oneiric/lucid/hardy,etc)"
 echo " For multiple series, put spaces between series"
 read MSERIES
 echo "What ppa number should we use? (1 for the first, etc.)"
 read PPANO
 let i=0
 for x in $MSERIES; do
   let i=i+1
 done 
 ntag="$tag"
 for SERIES in $MSERIES; do
  if [ $i -gt 1 ]; then
    tag="${ntag}~${SERIES}"
  fi
  debdir="parcellite_$tag"
  AVER="$tag-ppa"
#build our about version number
  if [ "$AI" = "y" ]; then
    AVER="$AVER-app"
    PPA="ppa:rickyrockrat/parcellite-appindicator"
    PDIR="ppa-app"
  else
    PPA="ppa:rickyrockrat/parcellite"
    PDIR="ppa"
  fi
  finish_ppa
 done

}
# show the links for the user to copy.
show_links () {
echo "Source Forge Links"
echo "The source can be <a href=\"http://sourceforge.net/projects/parcellite/files/parcellite/parcellite-$tag/parcellite-$tag.tar.gz/download\">downloaded here</a>."
echo "<a href=\"http://sourceforge.net/projects/parcellite/files/parcellite/parcellite-$tag/parcellite_$tag-1_i386.deb/download\">i386</a>"
echo "<a href=\"http://sourceforge.net/projects/parcellite/files/parcellite/parcellite-$tag/parcellite_$tag-1_amd64.deb/download\">amd64</a>."
}
